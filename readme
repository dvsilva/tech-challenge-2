# Tech Challenge 2 - FIAP 3FRNT

## üöÄ Quick Start

Para come√ßar rapidamente com toda a infraestrutura:

```bash
chmod +x quick-start.sh
./quick-start.sh
```

## üìã Vis√£o Geral

Este projeto √© uma aplica√ß√£o Node.js com integra√ß√£o AWS S3 e infraestrutura ECS para deploy na nuvem.

### üèóÔ∏è Arquitetura

- **Backend**: Node.js com Express
- **Banco de Dados**: MongoDB
- **Storage**: AWS S3
- **Infraestrutura**: AWS ECS + Fargate
- **Load Balancer**: Application Load Balancer
- **Container Registry**: Amazon ECR
- **Logs**: CloudWatch Logs
- **Secrets**: AWS Systems Manager Parameter Store

## üõ†Ô∏è Tecnologias

- Node.js 18+
- Express.js
- MongoDB/Mongoose
- AWS SDK
- Docker
- Terraform
- JWT Authentication
- Swagger/OpenAPI

## üì¶ Instala√ß√£o e Execu√ß√£o

### Desenvolvimento Local

```bash
# Instalar depend√™ncias
npm install

# Copiar arquivo de ambiente
cp .env.example .env
# Editar .env com suas configura√ß√µes

# Executar em modo desenvolvimento
npm run dev

# Ou executar em produ√ß√£o
npm start
```

### Docker Local

```bash
# Construir a imagem
docker build -t tech-challenge-2 .

# Executar o container
docker run -p 3000:3000 tech-challenge-2
```

### Deploy na AWS com ECS

```bash
# Navegar para o diret√≥rio terraform
cd terraform

# Deploy completo (S3 + ECS + Docker)
./deploy.sh -e dev --ecs --build-push

# Ou apenas S3
./deploy.sh -e dev
```

## üîß Configura√ß√£o

### Vari√°veis de Ambiente

```bash
# Configura√ß√µes obrigat√≥rias para ECS
export TF_VAR_mongodb_uri="mongodb+srv://user:pass@cluster.mongodb.net/db"
export TF_VAR_jwt_secret="your-super-secret-jwt-key"

# Configura√ß√µes opcionais
export TF_VAR_desired_count=2
export TF_VAR_cpu=512
export TF_VAR_memory=1024
```

### Ambientes Dispon√≠veis

- **dev**: Desenvolvimento (1 inst√¢ncia, recursos menores)
- **staging**: Homologa√ß√£o
- **prod**: Produ√ß√£o (2+ inst√¢ncias, recursos maiores)

## üåê AWS S3 Integration

Esta aplica√ß√£o inclui integra√ß√£o completa com AWS S3 para upload e gerenciamento de arquivos.

### S3 Endpoints:

- `POST /s3/signed-url` - Gerar URLs assinadas para upload/download
- `DELETE /s3/file` - Deletar arquivos do S3
- `GET /s3/files` - Listar arquivos do bucket
- `GET /s3/file/metadata` - Obter metadata do arquivo
- `GET /s3/health` - Verificar conectividade S3

### Testar S3:

Abra `s3-test.html` no seu navegador para testar a funcionalidade S3 com uma UI simples.

## üìñ Documenta√ß√£o

- [Configura√ß√£o ECS](./terraform/ECS_README.md)
- [Integra√ß√£o S3](./docs/S3_INTEGRATION.md)
- [Setup S3 CORS](./docs/S3_CORS_SETUP.md)
- [Ambiente de Desenvolvimento](./docs/DEV_ENVIRONMENT.md)

## üìä API Documentation

A documenta√ß√£o da API est√° dispon√≠vel via Swagger UI:

- Local: http://localhost:3000/docs
- AWS: http://[load-balancer-url]/docs

## üì• Importando Collection no Postman

Este projeto inclui uma collection do Postman (`tech-challenge-2.postman_collection.json`):

1. Abra o Postman
2. Clique em "Import"
3. Selecione o arquivo da collection
4. Todos os endpoints estar√£o dispon√≠veis para teste

![Postman Import](image.png)

![Postman Collection](image-1.png)

### Swagger

para acessar o Swagger basta voc√™ entrar na rota /docs
as rotas que necessitam de Autentica√ß√£o voc√™ pode colar o Bearer token no cadeado

### Autenticando

#### Criando usu√°rio

    "http:localhost:3000/user"
    body:
        {
            "username": "Aluno Carequinha",
            "email": "teste@gmail.com",
            "password": "testes"
        }

    cURL
    ```
        curl --location 'localhost:3000/user' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "username": "Aluno Carequinha",
            "email": "teste@gmail.com",
            "password": "testes"
        }'
    ```

    returno:

    ```
    {
        "message": "usu√°rio criado com sucesso",
        "result": {
            "username": "Aluno Carequinha",
            "email": "teste@gmail.com",
            "password": "testes",
            "id": "67607133f840bb97892eb657"
        }
    }
    ```

#### Autenticando

    "localhost:3000/user/auth"
    Body:
        {
            "email": "teste@gmail.com",
            "password": "testes"
        }
    cURL
    ```
        curl --location 'localhost:3000/user/auth' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "email": "teste@gmail.com",
            "password": "testes"
        }'
    ```

    retorno
    ```
        {
            "message": "Usu√°rio autenticado com sucesso",
            "result": {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IklzcmFlbCAyIiwiZW1haWwiOiJ0ZXN0ZUBnbWFpbC5jb20iLCJwYXNzd29yZCI6InRlc3RlcyIsImlkIjoiNjc2MDcxMzNmODQwYmI5Nzg5MmViNjU3IiwiaWF0IjoxNzM0MzczNjg4LCJleHAiOjE3MzQ0MTY4ODh9.jtaRKSifN_j7rFWn1KkH5fykecwhXFW0G4wLqj24I-k"
            }
        }
    ```

    Esse Token deve user usado para realizar as chamadas das outras apis

### Conta

#### Buscando conta

    "localhost:3000/account"

    Authorization: Bearer {{Token}}

    cURL
    ```
        curl --location 'localhost:3000/account' \
        --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IklzcmFlbCAyIiwiZW1haWwiOiJ0ZXN0ZUBnbWFpbC5jb20iLCJwYXNzd29yZCI6InRlc3RlcyIsImlkIjoiNjc2MDcxMzNmODQwYmI5Nzg5MmViNjU3IiwiaWF0IjoxNzM0MzczNjg4LCJleHAiOjE3MzQ0MTY4ODh9.jtaRKSifN_j7rFWn1KkH5fykecwhXFW0G4wLqj24I-k'
    ```
    Retorno
    ```
        {
            "message": "Conta encontrada carregado com sucesso",
            "result": {
                "account": [
                    {
                        "id": "67607133f840bb97892eb659",
                        "type": "Debit",
                        "userId": "67607133f840bb97892eb657"
                    }
                ],
                "transactions": [
                    {
                        "id": "67607174f840bb97892eb669",
                        "accountId": "67607133f840bb97892eb659",
                        "type": "Debit",
                        "value": -200,
                        "date": "2024-12-16T18:29:08.734Z"
                    },
                    {
                        "id": "67607174f840bb97892eb669",
                        "accountId": "67607133f840bb97892eb659",
                        "type": "Credit",
                        "value": 200,
                        "from": "text",
                        "to": "text",
                        "anexo": "text",
                        "date": "2024-12-16T18:29:08.734Z"
                    }
                ],
                "cards": [
                    {
                        "id": "67607133f840bb97892eb65b",
                        "accountId": "67607133f840bb97892eb659",
                        "type": "Debit",
                        "is_blocked": false,
                        "number": "13748712374891010",
                        "dueDate": "2027-01-07T00:00:00.000Z",
                        "functions": "Debit",
                        "cvc": "505",
                        "paymentDate": null,
                        "name": "Carequinha"
                    }
                ]
            }
        }
    ```

#### Criando Transa√ß√£o

    "localhost:3000/account/transaction"

    Body

        {
            "accountId": "67607133f840bb97892eb659",
            "type": "Credit", // Credit | Debit
            "value": 200,
            "from": "text", // String
            "to": "text", // String
            "anexo": "text", // String
        }

    cURL
    ```
        curl --location 'localhost:3000/account/transaction' \
        --header 'Content-Type: application/json' \
        --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IklzcmFlbCAyIiwiZW1haWwiOiJ0ZXN0ZUBnbWFpbC5jb20iLCJwYXNzd29yZCI6InRlc3RlcyIsImlkIjoiNjc2MDcxMzNmODQwYmI5Nzg5MmViNjU3IiwiaWF0IjoxNzM0MzczNjg4LCJleHAiOjE3MzQ0MTY4ODh9.jtaRKSifN_j7rFWn1KkH5fykecwhXFW0G4wLqj24I-k' \
        --data '{
            "accountId": "67607133f840bb97892eb659",
            "value": 200,
            "type": "Debit"
        }'
    ```

    Retorno
        {
            "id": "67607174f840bb97892eb669",
            "accountId": "67607133f840bb97892eb659",
            "type": "Debit",
            "value": -200,
            "date": "2024-12-16T18:29:08.734Z"
        }

#### Buscando extrato

    localhost:3000/account/{{accountId}}/statement

    Authorization Bearer {{Token}}
    Param:
        accountId

    ```
        curl --location 'localhost:3000/account/67607133f840bb97892eb659/statement' \
        --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IklzcmFlbCAyIiwiZW1haWwiOiJ0ZXN0ZUBnbWFpbC5jb20iLCJwYXNzd29yZCI6InRlc3RlcyIsImlkIjoiNjc2MDcxMzNmODQwYmI5Nzg5MmViNjU3IiwiaWF0IjoxNzM0MzczNjg4LCJleHAiOjE3MzQ0MTY4ODh9.jtaRKSifN_j7rFWn1KkH5fykecwhXFW0G4wLqj24I-k'
    ```

    Retorno
        {
            "message": "Transa√ß√£o criada com sucesso",
            "result": {
                "transactions": [
                    {
                        "id": "67607171f840bb97892eb665",
                        "accountId": "67607133f840bb97892eb659",
                        "type": "Credit",
                        "value": 200,
                        "date": "2024-12-16T18:29:05.170Z"
                    },
                    {
                        "id": "67607172f840bb97892eb667",
                        "accountId": "67607133f840bb97892eb659",
                        "type": "Debit",
                        "value": -200,
                        "date": "2024-12-16T18:29:06.250Z"
                    },
                    {
                        "id": "67607174f840bb97892eb669",
                        "accountId": "67607133f840bb97892eb659",
                        "type": "Debit",
                        "value": -200,
                        "date": "2024-12-16T18:29:08.734Z"
                    }
                ]
            }
        }
    ```

## üß™ Exemplos de API

### Autentica√ß√£o

#### Criar Usu√°rio

```bash
curl --location 'localhost:3000/user' \
--header 'Content-Type: application/json' \
--data-raw '{
    "username": "Aluno Carequinha",
    "email": "teste@gmail.com",
    "password": "testes"
}'
```

#### Autenticar

```bash
curl --location 'localhost:3000/user/auth' \
--header 'Content-Type: application/json' \
--data-raw '{
    "email": "teste@gmail.com",
    "password": "testes"
}'
```

### Contas e Transa√ß√µes

#### Buscar Conta

```bash
curl --location 'localhost:3000/account' \
--header 'Authorization: Bearer {seu-token}'
```

#### Criar Transa√ß√£o

```bash
curl --location 'localhost:3000/transaction' \
--header 'Authorization: Bearer {seu-token}' \
--header 'Content-Type: application/json' \
--data-raw '{
    "accountId": "67607133f840bb97892eb659",
    "value": -200,
    "type": "Debit"
}'
```

#### Buscar Extrato

```bash
curl --location 'localhost:3000/account/{accountId}/statement' \
--header 'Authorization: Bearer {seu-token}'
```

## üöß Troubleshooting

### Problemas Comuns

1. **Erro de autentica√ß√£o AWS**

   ```bash
   aws configure
   # ou
   export AWS_ACCESS_KEY_ID=sua-chave
   export AWS_SECRET_ACCESS_KEY=sua-chave-secreta
   ```

2. **ECS tasks n√£o iniciam**

   - Verifique os logs: `aws logs tail /ecs/tech-challenge-2-dev --follow`
   - Confirme que a imagem existe no ECR
   - Verifique as secrets no SSM Parameter Store

3. **Load Balancer unhealthy**

   - Confirme que a aplica√ß√£o responde na porta 3000
   - Verifique o endpoint `/docs`
   - Analise os security groups

4. **Build Docker falha**
   - Verifique se o Docker est√° rodando
   - Confirme as credenciais do ECR
   - Teste o build local primeiro

## üìû Suporte

Para d√∫vidas ou problemas:

1. Consulte a [documenta√ß√£o ECS](./terraform/ECS_README.md)
2. Verifique os logs do CloudWatch
3. Use o Swagger UI para testar endpoints

## üìù Licen√ßa

Este projeto √© parte do Tech Challenge 2 - FIAP 3FRNT.

---

**Desenvolvido com ‚ù§Ô∏è pela equipe Group6**
